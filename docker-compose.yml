version: '3.8'

services:
  # Banco de Dados
  postgres:
    image: postgres:14
    container_name: pos_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-posmodern}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-posmodern123}
      POSTGRES_DB: ${POSTGRES_DB:-posmodern}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - pos_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-posmodern} -d ${POSTGRES_DB:-posmodern}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: pos_rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-posmodern}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-posmodern123}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - pos_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache
  redis:
    image: redis:6
    container_name: pos_redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:-posmodern123}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - pos_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  pos_network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
