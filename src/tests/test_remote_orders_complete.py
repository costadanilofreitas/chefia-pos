#!/usr/bin/env python3
"""
Suite completa de testes para Remote Orders - PostgreSQL + API.
Este arquivo centraliza todos os testes relacionados aos Remote Orders.
"""

import asyncio
import os
import subprocess
import sys
from datetime import datetime

# Adicionar diret√≥rio raiz ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))


def run_command(command, description):
    """Executa um comando e retorna o resultado."""
    print(f"\nüîß {description}")
    print(f"Comando: {command}")
    try:
        result = subprocess.run(
            command, shell=True, capture_output=True, text=True, timeout=120
        )

        if result.returncode == 0:
            print(f"‚úÖ {description} - SUCESSO")
            if result.stdout:
                print(f"Output: {result.stdout[:500]}...")
            return True
        else:
            print(f"‚ùå {description} - FALHOU")
            if result.stderr:
                print(f"Erro: {result.stderr[:500]}...")
            return False

    except subprocess.TimeoutExpired:
        print(f"‚è∞ {description} - TIMEOUT")
        return False
    except Exception as e:
        print(f"üí• {description} - ERRO: {e}")
        return False


async def test_database_setup():
    """Testa se o PostgreSQL est√° configurado."""
    print("üóÑÔ∏è Verificando configura√ß√£o do PostgreSQL...")

    # Configurar vari√°veis de ambiente
    os.environ.update(
        {
            "DB_HOST": "localhost",
            "DB_PORT": "5432",
            "DB_USER": "posmodern",
            "DB_PASSWORD": "posmodern123",
            "DB_NAME": "posmodern",
        }
    )

    try:
        from src.core.database import get_database_manager

        db_manager = get_database_manager()
        await db_manager.initialize()

        health = await db_manager.health_check()
        await db_manager.close()

        if health:
            print("‚úÖ PostgreSQL conectado e funcionando")
            return True
        else:
            print("‚ùå PostgreSQL n√£o est√° respondendo")
            return False

    except Exception as e:
        print(f"‚ùå Erro ao conectar PostgreSQL: {e}")
        return False


async def run_postgres_tests():
    """Executa testes espec√≠ficos do PostgreSQL."""
    print("\nüìä Executando testes de integra√ß√£o PostgreSQL...")

    try:
        from src.tests.test_postgres_integration import main as postgres_main

        await postgres_main()
        return True
    except Exception as e:
        print(f"‚ùå Erro nos testes PostgreSQL: {e}")
        return False


def run_unit_tests():
    """Executa testes unit√°rios do remote orders."""
    print("\nüß™ Executando testes unit√°rios...")

    test_commands = [
        (
            "python -m pytest src/remote_orders/tests/ -v",
            "Testes unit√°rios Remote Orders",
        ),
        (
            "python src/remote_orders/tests/test_postgres_remote_orders.py",
            "Testes PostgreSQL espec√≠ficos",
        ),
    ]

    results = []
    for command, description in test_commands:
        try:
            result = run_command(command, description)
            results.append((description, result))
        except Exception as e:
            print(f"‚ùå Erro em {description}: {e}")
            results.append((description, False))

    return results


def check_server_status():
    """Verifica se o servidor est√° rodando."""
    print("\nüåê Verificando status do servidor...")

    import requests

    try:
        response = requests.get("http://localhost:8001/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servidor est√° rodando")
            return True
        else:
            print(f"‚ö†Ô∏è Servidor respondeu com status {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Servidor n√£o est√° acess√≠vel: {e}")
        return False


async def run_api_tests():
    """Executa testes de API se o servidor estiver rodando."""
    if not check_server_status():
        print("‚è≠Ô∏è Pulando testes de API (servidor n√£o est√° rodando)")
        return True

    print("\nüåê Executando testes de API...")

    try:
        from src.remote_orders.tests.test_remote_orders_api import main as api_main

        api_main()
        return True
    except Exception as e:
        print(f"‚ùå Erro nos testes de API: {e}")
        return False


async def main():
    """Executa todos os testes de forma organizada."""
    print("üöÄ Iniciando Suite Completa de Testes - Remote Orders")
    print("=" * 70)
    print(f"Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 70)

    all_results = []

    # 1. Verificar configura√ß√£o do banco
    print("\n" + "=" * 50)
    print("1Ô∏è‚É£ VERIFICA√á√ÉO DE DEPEND√äNCIAS")
    print("=" * 50)

    db_ok = await test_database_setup()
    all_results.append(("Configura√ß√£o PostgreSQL", db_ok))

    if not db_ok:
        print("‚ö†Ô∏è PostgreSQL n√£o est√° dispon√≠vel. Alguns testes ser√£o pulados.")

    # 2. Testes unit√°rios
    print("\n" + "=" * 50)
    print("2Ô∏è‚É£ TESTES UNIT√ÅRIOS")
    print("=" * 50)

    unit_results = run_unit_tests()
    all_results.extend(unit_results)

    # 3. Testes de integra√ß√£o PostgreSQL
    if db_ok:
        print("\n" + "=" * 50)
        print("3Ô∏è‚É£ TESTES DE INTEGRA√á√ÉO POSTGRESQL")
        print("=" * 50)

        postgres_ok = await run_postgres_tests()
        all_results.append(("Integra√ß√£o PostgreSQL", postgres_ok))

    # 4. Testes de API
    print("\n" + "=" * 50)
    print("4Ô∏è‚É£ TESTES DE API")
    print("=" * 50)

    api_ok = await run_api_tests()
    all_results.append(("Testes de API", api_ok))

    # Resumo final
    print("\n" + "=" * 70)
    print("üìä RESUMO FINAL DOS TESTES")
    print("=" * 70)

    passed = 0
    for test_name, result in all_results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name:.<50} {status}")
        if result:
            passed += 1

    print(f"\nResultado Final: {passed}/{len(all_results)} testes passaram")

    if passed == len(all_results):
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Remote Orders com PostgreSQL est√° funcionando perfeitamente!")
    else:
        print(f"\n‚ö†Ô∏è {len(all_results) - passed} teste(s) falharam.")
        print("Verifique os logs acima para mais detalhes.")

    print("\n" + "=" * 70)
    return passed == len(all_results)


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
